{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bm_control = _resolveComponent(\"bm-control\");\n\n  const _component_bm_polyline = _resolveComponent(\"bm-polyline\");\n\n  const _component_baidu_map = _resolveComponent(\"baidu-map\");\n\n  return _openBlock(), _createBlock(_component_baidu_map, {\n    class: \"map\",\n    center: {\n      lng: 116.404,\n      lat: 39.915\n    },\n    zoom: 14,\n    onMousemove: $options.syncPolyline,\n    onClick: $options.paintPolyline,\n    onRightclick: $options.newPolyline\n  }, {\n    default: _withCtx(() => [_createVNode(_component_bm_control, null, {\n      default: _withCtx(() => [_createElementVNode(\"button\", {\n        onClick: _cache[0] || (_cache[0] = $event => $options.toggle('polyline'))\n      }, _toDisplayString($data.polyline.editing ? '停止绘制' : '开始绘制'), 1\n      /* TEXT */\n      )]),\n      _: 1\n      /* STABLE */\n\n    }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.polyline.paths, path => {\n      return _openBlock(), _createBlock(_component_bm_polyline, {\n        path: path\n      }, null, 8\n      /* PROPS */\n      , [\"path\"]);\n    }), 256\n    /* UNKEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"center\", \"onMousemove\", \"onClick\", \"onRightclick\"]);\n}","map":{"version":3,"mappings":";;;;;;;;uBACIA,aAMYC,oBANZ,EAMY;IANDC,KAAK,EAAC,KAML;IANYC,MAAM,EAAE;MAAAC;MAAAC;IAAA,CAMpB;IANoDC,IAAI,EAAE,EAM1D;IAN+DC,WAAS,EAAEC,qBAM1E;IALPC,OAAK,EAAED,sBAKA;IALgBE,YAAU,EAAEF;EAK5B,CANZ;sBAEI,MAEa,CAFbG,aAEaC,qBAFb,EAEa,IAFb,EAEa;wBADT,MAAqF,CAArFC,oBAAqF,QAArF,EAAqF;QAA5EJ,OAAK,sCAAED,gBAAM,UAAN,CAAF;MAAuE,CAArF,mBAAuCM,eAASC,OAAT,GAAgB,MAAhB,GAAgB,OAAvD,EAAuD;MAAA;MAAvD,CAAqF,EAC5E;;;;IAAA,CAFb,CAEa,qBACbC,oBAAuEC,SAAvE,EAAuE,IAAvE,EAAuEC,YAA9BJ,eAASK,KAAqB,EAAtCC,IAAsB,IAAlB;2BAArCpB,aAAuEqB,sBAAvE,EAAuE;QAAzDD,IAAI,EAAEA;MAAmD,CAAvE,EAAwB,IAAxB,EAAwB;MAAA;MAAxB,EAAwB,QAAxB;KAAuE,CAAvE;;IAAA,CADa;;;;GAJjB;;EAAA","names":["_createBlock","_component_baidu_map","class","center","lng","lat","zoom","onMousemove","$options","onClick","onRightclick","_createVNode","_component_bm_control","_createElementVNode","$data","editing","_createElementBlock","_Fragment","_renderList","paths","path","_component_bm_polyline"],"sourceRoot":"","sources":["D:\\MyAllCoding\\SmartCycling\\web\\src\\views\\user\\cycles\\UserCycleRunIndexView.vue"],"sourcesContent":["<template>\r\n    <baidu-map class=\"map\" :center=\"{ lng: 116.404, lat: 39.915 }\" :zoom=\"14\" @mousemove=\"syncPolyline\"\r\n        @click=\"paintPolyline\" @rightclick=\"newPolyline\">\r\n        <bm-control>\r\n            <button @click=\"toggle('polyline')\">{{ polyline.editing ? '停止绘制' : '开始绘制' }}</button>\r\n        </bm-control>\r\n        <bm-polyline :path=\"path\" v-for=\"path of polyline.paths\"></bm-polyline>\r\n    </baidu-map>\r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport BaiduMap from 'vue-baidu-map/components/map/Map.vue'\r\n// import { onMounted } from 'vue'\r\nexport default {\r\n\r\n    components: {\r\n        BaiduMap\r\n    },\r\n    data() {\r\n        return {\r\n            polyline: {\r\n                editing: false,\r\n                paths: []\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        toggle(name) {\r\n            this[name].editing = !this[name].editing\r\n        },\r\n        syncPolyline(e) {\r\n            if (!this.polyline.editing) {\r\n                return\r\n            }\r\n            const { paths } = this.polyline\r\n            if (!paths.length) {\r\n                return\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            if (!path.length) {\r\n                return\r\n            }\r\n            if (path.length === 1) {\r\n                path.push(e.point)\r\n            }\r\n            this.$set(path, path.length - 1, e.point)\r\n        },\r\n        newPolyline() {\r\n            if (!this.polyline.editing) {\r\n                return\r\n            }\r\n            const { paths } = this.polyline\r\n            if (!paths.length) {\r\n                paths.push([])\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            path.pop()\r\n            if (path.length) {\r\n                paths.push([])\r\n            }\r\n        },\r\n        paintPolyline(e) {\r\n            if (!this.polyline.editing) {\r\n                return\r\n            }\r\n            const { paths } = this.polyline\r\n            !paths.length && paths.push([])\r\n            paths[paths.length - 1].push(e.point)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.bm-view {\r\n    width: 100%;\r\n    height: 300px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}